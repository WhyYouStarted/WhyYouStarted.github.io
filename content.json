{"meta":{"title":"初心","subtitle":"Never forget why you started, and your mission can be accomplished.","description":"","author":"Liu zhimin","url":"https://whyyoustarted.github.io","root":"/"},"pages":[{"title":"关于","date":"2019-12-06T16:27:25.308Z","updated":"2019-12-06T16:27:25.308Z","comments":false,"path":"about/index.html","permalink":"https://whyyoustarted.github.io/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"书单","date":"2019-12-06T16:27:25.315Z","updated":"2019-12-06T16:27:25.315Z","comments":false,"path":"books/index.html","permalink":"https://whyyoustarted.github.io/books/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2019-12-06T16:27:25.307Z","updated":"2019-12-06T16:27:25.307Z","comments":true,"path":"links/index.html","permalink":"https://whyyoustarted.github.io/links/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-12-06T16:27:25.317Z","updated":"2019-12-06T16:27:25.317Z","comments":false,"path":"tags/index.html","permalink":"https://whyyoustarted.github.io/tags/index.html","excerpt":"","text":""},{"title":"分类","date":"2019-12-06T16:27:25.314Z","updated":"2019-12-06T16:27:25.314Z","comments":false,"path":"categories/index.html","permalink":"https://whyyoustarted.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"sysctl -p 报错问题的解决方法","slug":"sysctl-p-报错问题的解决方法","date":"2020-03-07T00:43:27.000Z","updated":"2020-03-08T07:04:07.284Z","comments":true,"path":"2020/0307/solution-to-sysctl-p-error.html","link":"","permalink":"https://whyyoustarted.github.io/2020/0307/solution-to-sysctl-p-error.html","excerpt":"","text":"转载于:https://www.cnblogs.com/chenkeyu/p/6852608.html 最近执行sysctl -p 命令时一直报错，类似这种格式： error: permission denied on key…… 经过网上搜索， 原来这些问题都是因为openvz模版的问题，要进行修复操作：修复modprobe的： 代码如下 复制代码sudo rm -f /sbin/modprobesudo ln -s /bin/true /sbin/modprobe修复sysctl的： 代码如下 复制代码sudo rm -f /sbin/sysctlsudo ln -s /bin/true /sbin/sysctl 再次执行sysctl -p 没有报错~","categories":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://whyyoustarted.github.io/categories/Ubuntu/"}],"tags":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://whyyoustarted.github.io/tags/Ubuntu/"}]},{"title":"Ubuntu 16.04下安装Oracle 11g","slug":"Ubuntu-16-04下安装Oracle-11g","date":"2020-03-07T00:42:43.000Z","updated":"2020-03-08T08:30:41.041Z","comments":true,"path":"2020/0307/install-oracle-11g-under-ubuntu-1604.html","link":"","permalink":"https://whyyoustarted.github.io/2020/0307/install-oracle-11g-under-ubuntu-1604.html","excerpt":"","text":"1. 前言本篇只是简单安装，满足学习Oracle的使用 2. 环境​ Ubuntu：16.04 ​ Oracle： linux.x64_11gR2_database ​ JDK： jdk-8u144-linux-x64.tar ​ 这些东西我会放在文末的百度云中，有需要可以自取 3. 安装Oracle前的准备 安装并配置JDK 安装JDK之前我需要先下载一个vim，方便我们编辑文档。 使用命令：sudo apt-get install vim等待它自动安装即可 使用命令mkdir software和mkdir module创建两个文件夹，然后将jdk拖到software中 使用命令tar -zxf software/jdk-8u144-linux-x64.tar.gz -C module/安装JDK 在家目录下使用命令vim .bash_profile在英文状态下按i进入编辑模式后在里面添加如下内容 12345678#将lzm改成你自己的用户名export JAVA_HOME=/home/lzm/module/jdk1.8.0_144export JRE_HOME=$&#123;JAVA_HOME&#125;/jreexport CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/libexport PATH=$&#123;JAVA_HOME&#125;/bin:$PATH 添加好后esc，在英文状态下输入:wq进行保存 然后使用命令source .bash_profile来是配置生效 使用命令java -version如果出现如下的信息就代表配置成功了 安装依赖 因为依赖是32位的所以需要换源安装，并且需要以管理员模式来操作 su cd /etc/apt/sources.list.d echo &quot;deb http://old-releases.ubuntu.com/ubuntu/ raring main restricted universe multiverse&quot; &gt; ia32-libs-raring.list apt update apt-get -y install lesstif2 lesstif2-dev 这样我需要安装的依赖就安装好了，现在我们需要将其还原 rm -rf ia32-libs-raring.list apt update 现在我们可以退出管理员账户了使用命令exit 然后我们安装其余的依赖 sudo apt-get -y install automake autotools-dev binutils bzip2 elfutils expat gawk gcc gcc-multilib g++-multilib lib32ncurses5 lib32z1 ksh less lib32z1 libaio1 libaio-dev libc6-dev libc6-dev-i386 libc6-i386 libelf-dev libltdl-dev libxm4 libodbcinstq4-1 libodbcinstq4-1:i386 libpth-dev libpthread-stubs0-dev libstdc++5 make openssh-server rlwrap rpm sysstat unixodbc unixodbc-dev unzip x11-utils zlibc ![](https://cdn.jsdelivr.net/gh/WhyYouStarted/PhotoGallery@master/images/Hadoop/截屏2020-03-07上午10.31.34.png) ![](https://cdn.jsdelivr.net/gh/WhyYouStarted/PhotoGallery@master/images/Hadoop/截屏2020-03-07上午10.55.08.png) 等待安装就行了 配置环境 使用下面的命令查询参数 123456789101112131415161718192021/sbin/sysctl -a | grep sem/sbin/sysctl -a | grep file-max/sbin/sysctl -a | grep aio-max/sbin/sysctl -a | grep ip_local_port_range/sbin/sysctl -a | grep rmem_default/sbin/sysctl -a | grep rmem_max/sbin/sysctl -a | grep wmem_default/sbin/sysctl -a | grep wmem_max/sbin/sysctl -a | grep shmall/sbin/sysctl -a | grep shmmax/sbin/sysctl -a | grep shmmni 将查询出来的参数填入下面对应的地方 1234567891011kernel.sem = 32000 1024000000 500 32000fs.file-max = 242293fs.aio-max-nr = 65536net.ipv4.ip_local_port_range = 32768 60999net.core.rmem_default = 212992net.core.rmem_max = 212992net.core.wmem_default = 212992net.core.wmem_max = 212992kernel.shmall = 18446744073692774399kernel.shmmax = 18446744073692774399kernel.shmmni = 4096 如果版本一样可以直接复制 修改sysctl.conf文件，使用命令sudo vim /etc/sysctl.conf 将上面的内容添加到文件中 更新内核参数 sysctl –p 如果这里报sysctl: cannot stat /proc/sys/–p可以参考一下·········· 添加用户的内核限制（我的用户名是lzm） sudo vim /etc/security/limits.conf 12345lzm soft nproc 2047lzm hard nproc 16384lzm soft nofile 1024lzm hard nofile 65536lzm soft stack 10240 创建文件夹 mkdir module/oracle11g 配置Oracle的环境变量 vim .bash_profile 将下面内容添加到文件中 1234567891011export ORACLE_BASE=/home/lzm/module/oracle11gexport ORACLE_HOME=$ORACLE_BASE/product/11.2.0/dbhome_1export ORACLE_SID=orclexport ORACLE_UNQNAME=orclexport NLS_LANG=.AL32UTF8export PATH=$&#123;PATH&#125;:$&#123;ORACLE_HOME&#125;/bin/:$ORACLE_HOME/lib64 然后使用命令source .bash_profile来是配置生效 欺骗oracle的安装设置 12345678910sudo mkdir /usr/lib64sudo ln -s /etc /etc/rc.dsudo ln -s /lib/x86_64-linux-gnu/libgcc_s.so.1 /lib64/sudo ln -s /usr/bin/awk /bin/awksudo ln -s /usr/bin/basename /bin/basenamesudo ln -s /usr/bin/rpm /bin/rpmsudo ln -s /usr/lib/x86_64-linux-gnu/libc_nonshared.a /usr/lib64/sudo ln -s /usr/lib/x86_64-linux-gnu/libpthread_nonshared.a /usr/lib64/sudo ln -s /usr/lib/x86_64-linux-gnu/libstdc++.so.6 /lib64/sudo ln -s /usr/lib/x86_64-linux-gnu/libstdc++.so.6 /usr/lib64/ 切换root账户 su echo &#39;Red Hat Linux release 5&#39; &gt; /etc/RedHat-release exit 4. 安装Oracle 解压 将压缩包拖到software中 使用命令 unzip -d module/oracle11g software/linux.x64_11gR2_database_1of2.zip unzip -d module/oracle11g software/linux.x64_11gR2_database_2of2.zip 安装(这里要在虚拟机内进行，shell工具不行) cd module/oracle11g/database/ LANG=en_US ./runInstaller ./runInstaller -jreLoc ~/module/jdk1.8.0_144/jrecd /tmp/CVU_11.2.0.1.0_lzm/ sudo ./runfixup.sh sudo sed -i ‘s/^(TNSLSNR_LINKLINE.*$(TNSLSNR_OFILES)) ($(LINKTTLIBS))/\\1 -Wl,–no-as-needed \\2/g’ tool/oracle11g/product/11.2.0/dbhome_1/network/lib/env_network.mk sudo sed -i ‘s/^(ORACLE_LINKLINE.*$(ORACLE_LINKER)) ($(PL_FLAGS))/\\1 -Wl,–no-as-needed \\2/g’ tool/oracle11g/product/11.2.0/dbhome_1/rdbms/lib/env_rdbms.mk sudo sed -i ‘s/^($LD $LD_RUNTIME) ($LD_OPT)/\\1 -Wl,–no-as-needed \\2/g’ tool/oracle11g/product/11.2.0/dbhome_1/bin/genorasdksh sudo sed -i ‘s/^(\\s*)($(OCRLIBS_DEFAULT))/\\1 -Wl,–no-as-needed \\2/g’ tool/oracle11g/product/11.2.0/dbhome_1/srvm/lib/ins_srvm.mk","categories":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://whyyoustarted.github.io/categories/Ubuntu/"}],"tags":[{"name":"Oracle","slug":"Oracle","permalink":"https://whyyoustarted.github.io/tags/Oracle/"}]},{"title":"Ubuntu下搭建完全分布式Hadoop集群","slug":"Ubuntu下搭建完全分布式Hadoop集群","date":"2020-02-21T02:10:27.000Z","updated":"2020-03-16T13:41:38.018Z","comments":true,"path":"2020/0221/build-a-fully-distributed-hadoop-cluster-under-ubuntu.html","link":"","permalink":"https://whyyoustarted.github.io/2020/0221/build-a-fully-distributed-hadoop-cluster-under-ubuntu.html","excerpt":"","text":"Hadoop的运行环境介绍 hadoop主要有三种运行模式：单机模式、伪分布模式、完全分布模式。 其中在单机模式下所有3个XML文件均为空，当配置文件为空时，Hadoop会完全运行在本地，因为不需要与其他节点交互，单机模式就不使用HDFS，也不加载任何Hadoop的守护进程。该模式主要用于开发调试MapReduce程序的应用逻辑。 在伪分布式模式下是指在“单节点集群”上运行Hadoop，其中所有的守护进程都运行在同一台机器上，即Jobtracker、Tasktracker、Namenode、Datanode、Secondarynamenode进程都运行在同一台主机上。该模式在单机模式之上增加了代码调试功能，允许你检查内存使用情况，HDFS输入输出，以及其他的守护进程交互。 完全分布式模式是将hadoop运行在了一个真正的集群上，该集群内含有一个主节点master，及至少两个的从节点slave；其中主节点上主要运行Namenode、Jobtracker、Secondarynamenode进程，从节点主要运行Datanode、Tasketracker进程。这种模式下可以真正实现hadoop的分布式处理，有主节点对从节点的任务分配调度以及HDFS在主机间的输入输出。 Hadoop集群搭建准备工作 需要提前下载好的文件： ubuntu-16.04.5-desktop-amd64.iso jdk-8u144-linux-x64.tar hadoop-2.7.2.tar 虚拟机准备 在Parallels Desktop中新建一台虚拟机，快照并克隆三次，得到了三台虚拟机 注意：快照的是为了节省自己的硬盘空间 使三台虚拟机连通 先使用命令ifconfig查看三台虚拟机的ip地址 然后使用命令sudo vim /etc/hostname修改主机名 这里就拿一个演示，剩下的两台也改 注意：我是以ip地址末尾来命名的，你也可以使用master，slave1，slave2命名，只要自己可以分辨出虚拟机是哪台就行 然后我们添加该局域网内的集群中其他虚拟主机ip 使用命令sudo vim /etc/hosts将和主机名一样的ip地址注释掉并添加三台主机的ip和主机名，修改具体情况如下： 三台虚拟机都需要这样配置 然后使用命令ping -c 3 hadoop7测试互相可以ping通 配置免密登陆 先使用命令ssh localhost，如果提示输入密码那么就代表你有ssh，如果出现connect to host localhost port 22:Connection refused那么请参考：Ubuntu下 ssh : connect to host localhost port 22:Connection refused 安装好ssh后可以使用命令ssh-keygen -t rsa -P &#39;&#39;，提示输入密钥保存的路径，直接按enter键使用默认值即可 然后使用命令ssh-copy-id hadoop6将空钥发到本机，同样需要发到hadoop7，hadoop8 然后另两台服务器也需要这样配置 配置好后可以使用ssh hadoop6登录虚拟机，使用exit可以推出登录 安装JDK和Hadoop 使用命令mkdir /opt/module /opt/software在/opt下创建software和module文件夹 并使用命令chown lzm:lzm /opt/module /opt/software将所有权赋给当前用户 可以使用ls -l来进行查看 将JDK和Hadoop的安装包复制到software文件夹，然后使用命令tar -zxf hadoop-2.7.2.tar.gz -C /opt/module，tar -zxf jdk-8u144-linux-x64.tar.gz -C /opt/module将其安装到module目录下 同样两台都进行配置 配置环境变量 使用命令sudo vim /etc/profile在文件后面添加 1234567#JAVA_HOMEexport JAVA_HOME=/opt/module/jdk1.8.0_144export PATH=$PATH:$JAVA_HOME/bin#HADOOP_HOMEexport HADOOP_HOME=/opt/module/hadoop-2.7.2export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin 保存后使用命令source /etc/profile重新启动一下配置，然后使用java -version和hadoop version来测试一下环境变量是否配置完成 另外两个虚拟机也是同样的 配置Hadoop 注意：所有配置文件都在$HADOOP_HOME/etc/hadoop 首先配置hadoop-env.sh,yarn-env.sh,mapred-env.sh文件，在每个文件第二行添加 export JAVA_HOME=/opt/module/jdk1.8.0_144 2. 配置`core-site.xml`，在文档中添加 1234567891011&lt;!-- 指定HDFS中NameNode的地址 --&gt; &lt;property&gt; &lt;name&gt;fs.defaultFS&lt;/name&gt; &lt;value&gt;hdfs://hadoop6:9000&lt;/value&gt;&lt;!-- 这里改成自己的主机名 --&gt; &lt;/property&gt; &lt;!-- 指定Hadoop运行时产生文件的存储目录 --&gt; &lt;property&gt; &lt;name&gt;hadoop.tmp.dir&lt;/name&gt; &lt;value&gt;/opt/module/hadoop-2.7.2/data/tmp&lt;/value&gt; &lt;/property&gt; ![](https://cdn.jsdelivr.net/gh/WhyYouStarted/PhotoGallery@master/images/Hadoop/截屏2020-02-25下午8.11.02.png) 3. 配置`hdfs-site.xml`，在文档中添加 12345678910&lt;!-- 数据的副本数量 --&gt; &lt;property&gt; &lt;name&gt;dfs.replication&lt;/name&gt; &lt;value&gt;3&lt;/value&gt; &lt;/property&gt; &lt;!-- 指定Hadoop辅助名称节点主机配置 --&gt; &lt;property&gt; &lt;name&gt;dfs.namenode.secondary.http-address&lt;/name&gt; &lt;value&gt;hadoop8:50090&lt;/value&gt;&lt;!-- 这里改成自己的主机名 --&gt; &lt;/property&gt; ![](https://cdn.jsdelivr.net/gh/WhyYouStarted/PhotoGallery@master/images/Hadoop/截屏2020-02-25下午8.39.01.png) 4. 配置`yarn-site.xml`，在文档中添加 1234567891011121314151617181920212223&lt;!-- Site specific YARN configuration properties --&gt; &lt;!-- Reducer获取数据的方式 --&gt; &lt;property&gt; &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt; &lt;value&gt;mapreduce_shuffle&lt;/value&gt; &lt;/property&gt; &lt;!-- 指定YARN的ResourceManager的地址 --&gt; &lt;property&gt; &lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt; &lt;value&gt;hadoop7&lt;/value&gt;&lt;!-- 这里改成自己的主机名 --&gt; &lt;/property&gt; &lt;!-- 日志聚集功能使能 --&gt; &lt;property&gt; &lt;name&gt;yarn.log-aggregation-enable&lt;/name&gt; &lt;value&gt;true&lt;/value&gt; &lt;/property&gt; &lt;!-- 日志保留时间设置7天 --&gt; &lt;property&gt; &lt;name&gt;yarn.log-aggregation.retain-seconds&lt;/name&gt; &lt;value&gt;604800&lt;/value&gt; &lt;/property&gt; ![](https://cdn.jsdelivr.net/gh/WhyYouStarted/PhotoGallery@master/images/Hadoop/截屏2020-02-25下午8.11.35.png) 5. 配置`mapred-site.xml`，这个文档先需要使用命令`cp mapred-site.xml.template mapred-site.xml`复制一份然后在文档中添加 1234567891011121314&lt;property&gt; &lt;name&gt;mapreduce.framework.name&lt;/name&gt; &lt;value&gt;yarn&lt;/value&gt; &lt;/property&gt; &lt;!-- 历史服务器端地址 --&gt; &lt;property&gt; &lt;name&gt;mapreduce.jobhistory.address&lt;/name&gt; &lt;value&gt;hadoop8:10020&lt;/value&gt; &lt;/property&gt; &lt;!-- 历史服务器web端地址 --&gt; &lt;property&gt; &lt;name&gt;mapreduce.jobhistory.webapp.address&lt;/name&gt; &lt;value&gt;hadoop8:19888&lt;/value&gt; &lt;/property&gt; ![](https://cdn.jsdelivr.net/gh/WhyYouStarted/PhotoGallery@master/images/Hadoop/截屏2020-02-25下午8.12.08.png) 6. 配置`slaves`，在文档中添加 123hadoop6hadoop7hadoop8 ![](https://cdn.jsdelivr.net/gh/WhyYouStarted/PhotoGallery@master/images/Hadoop/截屏2020-02-25下午8.40.16.png) 这样一台虚拟机就配置好了，我们可以讲以上步骤重复一遍或者使用命令`rsync -av/opt/module/hadoop-2.7.2/etc lzm@hadoop7:/opt/module/hadoop-2.7.2/etc`，hadoop8也是一样（如果使用命令操作的话，更换`lzm@hadoop7`为自己的） 启动hadoop集群 完成了上述的步骤，伪分布式hadoop集群就搭建好了，下面我们启动集群 第一步： 在hadoop6上输入命令hdfs namenode -format，这一步是初始化Namenode 第二步： 格式化完成后在hadoop6上输入命令start-dfs.sh启动HDFS 第三步： 然后在hadoop7（配置Resourcemanager的机器）上启动yarn，使用命令start-yarn.sh 这是可以使用jps来查看一下启动的服务是否正确，如果和下图一样就是安装完成了 这样我就可以在浏览器中输入10.211.55.6:50070和10.211.55.7:8088来查看hadoop的页面","categories":[{"name":"Hadoop","slug":"Hadoop","permalink":"https://whyyoustarted.github.io/categories/Hadoop/"}],"tags":[{"name":"Hadoop","slug":"Hadoop","permalink":"https://whyyoustarted.github.io/tags/Hadoop/"}]},{"title":"Ubuntu下vim的安装以及配置","slug":"Ubuntu下vim的安装以及配置","date":"2020-02-18T06:37:54.000Z","updated":"2020-02-18T07:12:22.043Z","comments":true,"path":"2020/0218/installation-and-configuration-of-vim-under-ubuntu.html","link":"","permalink":"https://whyyoustarted.github.io/2020/0218/installation-and-configuration-of-vim-under-ubuntu.html","excerpt":"","text":"vim工具可以方便的从liunx终端打开编辑修改文件，是一款在Ubuntu系统下必备的工具 首先是安装： 在终端中输入sudo apt-get install vim-gtk，然后根据提示安装即可 安装完成后可以使用命令vim --version来测试一下，如果出现类似下图的信息，就是安装成功了 安装成功我们就需要配置一下vim，使其美观 如果只对各个用户在自己的当前目录下的.vimrc修改的话，修改内容只对本用户有效,要想全部有效，可以修改/etc/vim/vimrc。 在终端下使用vim进行编辑时，默认情况下，编辑的界面上是没有显示行号、语法高亮度显示、智能缩进等功能的。为了更好的在vim下进行工作，需要手动设置一个配置文件：.vimrc。 启动vim时，当前用户根目录下的.vimrc文件会被自动读取，该文件可以包含一些设置甚至脚本，所以，一般情况下把.vimrc文件创建在当前用户的根目录下比较方便。 只对本用户有效：vim ~/.vimrc 对所有用户有效：sudo vim /etc/vim/vimrc 这是我使用的，可以根据需要将其复制到vimrc中 12345678910111213141516171819202122232425&quot; 设置外观 -------------------------------------set number &quot;显示行号set showtabline=0 &quot;隐藏顶部标签栏&quot;set guioptions-=r &quot;隐藏右侧滚动条&quot;set guioptions-=L &quot;隐藏左侧滚动条&quot;set guioptions-=b &quot;隐藏底部滚动条&quot;set cursorline &quot;突出显示当前行&quot;&quot;set cursorcolumn &quot;突出显示当前列&quot;set langmenu=zh_CN.UTF-8 &quot;显示中文菜单&quot; 变成辅助 -------------------------------------syntax on &quot;开启语法高亮set nowrap &quot;设置代码不折行&quot;set fileformat=unix &quot;设置以unix的格式保存文件&quot;set cindent &quot;设置C样式的缩进格式&quot;set tabstop=4 &quot;一个 tab 显示出来是多少个空格，默认 8set shiftwidth=4 &quot;每一级缩进是多少个空格set backspace+=indent,eol,start &quot;set backspace&amp;可以对其重置set showmatch &quot;显示匹配的括号&quot;set scrolloff=5 &quot;距离顶部和底部5行&quot;set laststatus=2 &quot;命令行为两行&quot;&quot; 其他杂项 -------------------------------------set mouse=a &quot;启用鼠标&quot;set selection=exclusiveset selectmode=mouse,keyset matchtime=5","categories":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://whyyoustarted.github.io/categories/Ubuntu/"}],"tags":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://whyyoustarted.github.io/tags/Ubuntu/"}]},{"title":"Ubuntu16.04 sudo:无法解析主机 解决方案","slug":"Ubuntu16-04-sudo-无法解析主机-解决方案","date":"2020-02-18T06:34:13.000Z","updated":"2020-02-18T07:12:21.836Z","comments":true,"path":"2020/0218/ubuntu-1604-sudo-cannot-resolve-host-solution.html","link":"","permalink":"https://whyyoustarted.github.io/2020/0218/ubuntu-1604-sudo-cannot-resolve-host-solution.html","excerpt":"","text":"本文转载自：https://blog.csdn.net/lanhaixuanvv/article/details/78387580 在使用linux的sudo命令时候可能有些人会遇到这样的问题：“sudo:无法解析主机:xxxxx(您的主机名)，我也遇到了这种问题，我的解决方案： 出现这种问题是hosts文件没有配置好所导致的，linux无法解析到您的主机地址，解决方案如下： 1$ sudo vim /etc/hosts 打开文件以后，将其中的 1127.0.1.1 xxxxx 后面的xxxx替换为你的电脑主机名字，也就是错误中最后那串字符。如果没有的话就将其添加进去。 可以使用命令在终端查看主机名： 1$ hostname 将查看的主机名代替xxxx即可","categories":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://whyyoustarted.github.io/categories/Ubuntu/"}],"tags":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://whyyoustarted.github.io/tags/Ubuntu/"}]},{"title":"Ubuntu apt update一直等待的解决办法","slug":"ubuntu-apt-update一直等待的解决办法","date":"2020-02-16T07:33:33.000Z","updated":"2020-02-16T07:39:54.345Z","comments":true,"path":"2020/0216/solution-that-ubuntu-apt-update-has-been-waiting-for.html","link":"","permalink":"https://whyyoustarted.github.io/2020/0216/solution-that-ubuntu-apt-update-has-been-waiting-for.html","excerpt":"","text":"本文转载自：https://blog.csdn.net/notacoder/article/details/102680465 需要删除以下几个lock file就OK了 123sudo rm /var/lib/apt/lists/locksudo rm /var/cache/apt/archives/locksudo rm /var/lib/dpkg/lock","categories":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://whyyoustarted.github.io/categories/Ubuntu/"}],"tags":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://whyyoustarted.github.io/tags/Ubuntu/"}]},{"title":"Ubuntu安装openssh-server遇到的问题","slug":"Ubuntu安装openssh-server遇到的问题","date":"2020-02-16T07:16:14.000Z","updated":"2020-02-16T09:23:26.086Z","comments":true,"path":"2020/0216/problems-encountered-in-installing-opensshserver-ubuntu.html","link":"","permalink":"https://whyyoustarted.github.io/2020/0216/problems-encountered-in-installing-opensshserver-ubuntu.html","excerpt":"","text":"使用命令sudo apt-get install openssh-server但是报如下结果 1234完成正在分析软件包的依赖关系树正在读取状态信息...完成现在没有可用的软件包 openssh-server，但是他被其他的软件包引用了这可能意味着这个缺失的软件包可能已被废弃，或者只能在其他发布源中找到E:软件包 openssh-server 还没有可供安装的候选者 上网查到的资料原因是：Ubuntu的软件源问题 所以需要我们更换源，我们可以使用电脑自带的寻找服务器的方法。 在Ubuntu的设置中的软件和更新 下载自下拉框中的其他站点 选择阿里云的镜像源，选择服务器，这里需要权限密码 关闭的时候需要重新载入一下，如果这里卡在waiting for unattended-upgr to exit不动到话请参考Ubuntu apt update一直等待的解决办法 等待进度条走完后，执行sudo apt-get update 注意：如果还是没解决的话可以看一下下面的参考博客 参考博客：https://www.cnblogs.com/liangyue/p/8231556.html","categories":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://whyyoustarted.github.io/categories/Ubuntu/"}],"tags":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://whyyoustarted.github.io/tags/Ubuntu/"}]},{"title":"Ubuntu下 ssh : connect to host localhost port 22:Connection refused","slug":"Ubuntu下-ssh-connect-to-host-localhost-port-22-Connection-refused","date":"2020-02-16T06:50:20.000Z","updated":"2020-02-16T07:44:53.532Z","comments":true,"path":"2020/0216/ssh-under-ubuntu-connect-to-host-localhost-port-22-connection-refused.html","link":"","permalink":"https://whyyoustarted.github.io/2020/0216/ssh-under-ubuntu-connect-to-host-localhost-port-22-connection-refused.html","excerpt":"","text":"Ubuntu下测试ssh时使用ssh localhost 命令，出现错误提示connect to host localhost port 22:Connection refused 造成这个错误的原因可能是ssh-server未安装或者未启动。ubuntu 16.04 默认安装openssh-client，但是没有安装server 所以使用ps -e | grep ssh来查看是否有sshd进程，如果没有出现类似下图的信息，那么说明server没启动，通过命令 /etc/init.d/ssh -start 来启动server进程，如果提示ssh不存在 那么就是没安装server 可以使用命令sudo apt-get install openssh-server进行安装，如果出现如下错误可以参考Ubuntu安装openssh-server遇到的问题 1234完成正在分析软件包的依赖关系树正在读取状态信息...完成现在没有可用的软件包 openssh-server，但是他被其他的软件包引用了这可能意味着这个缺失的软件包可能已被废弃，或者只能在其他发布源中找到E:软件包 openssh-server 还没有可供安装的候选者 本文参考：http://asyty.iteye.com/blog/1440141","categories":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://whyyoustarted.github.io/categories/Ubuntu/"}],"tags":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://whyyoustarted.github.io/tags/Ubuntu/"}]},{"title":"MAC下安装JDK以及配置环境","slug":"MAC下安装JDK以及配置环境","date":"2020-01-08T11:53:54.000Z","updated":"2020-01-11T11:19:41.064Z","comments":true,"path":"2020/0108/install-jdk-and-configure-environment-under-mac.html","link":"","permalink":"https://whyyoustarted.github.io/2020/0108/install-jdk-and-configure-environment-under-mac.html","excerpt":"","text":"前言 本文将展示如何在MAC系统下安装并配置JDK 下载JDK前往Oracle官网选择JDK1.8并进行下载 下载完成后点击安装包，按提示即可完成安装。 配置JDK现在我们只是将JDK按照到了MAC上，但是现在只能在JAVA安装目录下运行JAVA的命令，现在需要配置环境变量，方便我们随时的运行JAVA命令。 jdk安装好的路径可以在访达中的资源库/Java/JavaVirtualMachines//jdk1.8.0_231.jdk/Contents/Home，具体路径可以自己查看一下，如果不一样一般也是JDK版本不一样。 在终端中输入cd ~，回车在输入vim .bash_profile 在英文状态下按i，进入编辑模式 输入以下内容，路径以自己实际路径为准 1export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_231.jdk/Contents/Home 在英文状态下，点击Esc结束输入模式，输入 :wq 回车保存并推出。 验证JDK是否安装成功可以在终端输入javac，如果出现如下信息就配置成功了。","categories":[{"name":"系统","slug":"系统","permalink":"https://whyyoustarted.github.io/categories/%E7%B3%BB%E7%BB%9F/"}],"tags":[{"name":"JDK","slug":"JDK","permalink":"https://whyyoustarted.github.io/tags/JDK/"}]},{"title":"Mac 每次打开终端要再次执行source ~/.bash_profile 配置的环境变量才生效","slug":"Mac-每次打开终端要再次执行source-bash-profile-配置的环境变量才生效","date":"2019-12-25T03:06:50.000Z","updated":"2020-02-16T07:06:16.771Z","comments":true,"path":"2019/1225/every-time-you-open-a-mac-must-execute-the-source-bashprofile-environment-variable-configuration-again-to-take-effect.html","link":"","permalink":"https://whyyoustarted.github.io/2019/1225/every-time-you-open-a-mac-must-execute-the-source-bashprofile-environment-variable-configuration-again-to-take-effect.html","excerpt":"","text":"出现问题自己在 ~/.bash_profile 中配置环境变量, 可是每次重启终端后配置的不生效.需要使用命令 source ~/.bash_profile使.bash_profile生效 解决发现zsh加载的是~/.zshrc文件，而 .zshrc 文件中并没有定义任务环境变量。 在~/.zshrc文件最后，增加一行：source ~/.bash_profile，即可","categories":[{"name":"系统","slug":"系统","permalink":"https://whyyoustarted.github.io/categories/%E7%B3%BB%E7%BB%9F/"}],"tags":[{"name":"环境变量","slug":"环境变量","permalink":"https://whyyoustarted.github.io/tags/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"}]},{"title":"Mac下Maven出现JAVA_HOME is not defined correctly问题","slug":"Mac下Maven出现JAVA-HOME-is-not-defined-correctly问题","date":"2019-12-16T03:48:21.000Z","updated":"2019-12-16T11:32:09.763Z","comments":true,"path":"2019/1216/javahome-is-not-defined-correctly-with-maven-on-mac.html","link":"","permalink":"https://whyyoustarted.github.io/2019/1216/javahome-is-not-defined-correctly-with-maven-on-mac.html","excerpt":"","text":"前言在配置好Maven后在终端中输入mvn -v终端显示JAVA_HOME is not defined correctly 解决方法编辑.bash_profile，在此文件中添加一行export JAVA_HOME=$(/usr/libexec/java_home)，可以解决此问题 使用mvn -v正常","categories":[{"name":"Maven","slug":"Maven","permalink":"https://whyyoustarted.github.io/categories/Maven/"}],"tags":[{"name":"Maven","slug":"Maven","permalink":"https://whyyoustarted.github.io/tags/Maven/"}]},{"title":"Mac下安装Maven","slug":"Mac下安装Maven","date":"2019-12-16T02:07:39.000Z","updated":"2020-01-11T11:16:56.138Z","comments":true,"path":"2019/1216/install-maven-on-mac.html","link":"","permalink":"https://whyyoustarted.github.io/2019/1216/install-maven-on-mac.html","excerpt":"","text":"前言本篇博客将在MAC上安装Maven，配置Maven 注意： 在mac下安装Maven必须以及安装了JDK，如果没有安装JDK请参考MAC下安装JDK以及配置环境 本文安装的是maven3.3.9，JDK必须在1.7及以上 1.下载Maven在MAVEN的官网https://maven.apache.org/download.cgi进行下载MAVEN 本人下载的是3.3.9，在archives下的3.3.9/binaries/apache-maven-3.3.9-bin.tar.gz 2.配置Maven 安装： 将下载好的文件解压到user目录下 配置： 在终端中输入 vim ~/.bash_profile 在英文状态下按下i，进入编辑模式 在环境变量文件中加上如下的配置 12export MAVEN_HOME=/Users/你的users名字/apache-maven-3.3.9 export PATH=$PATH:$MAVEN_HOME/bin 添加完以后按esc键并在英文状态下输入:wq进行保存 将~/.bash_profile编辑完后在终端输入source .bash_profile使bash_profile配置文件生效 ​ 3. 测试Maven 在终端中输入mvn -v，如果出现以下信息就说明配置完成了。 如果在终端中输入mvn -v出现JAVA_HOME is not defined correctly.,请参考Mac下Maven出现JAVA_HOME is not defined correctly问题 这时当你关闭终端后再开启后输入mvn -v有可能会出现zsh: command not found: mvn -v，请参考Mac 每次打开终端要再次执行source ~/.bash_profile 配置的环境变量才生效","categories":[{"name":"Maven","slug":"Maven","permalink":"https://whyyoustarted.github.io/categories/Maven/"}],"tags":[{"name":"Maven","slug":"Maven","permalink":"https://whyyoustarted.github.io/tags/Maven/"}]},{"title":"在MAC下搭建专属你的hexo博客(二)","slug":"在MAC下搭建专属你的hexo博客-二","date":"2019-12-07T02:18:21.000Z","updated":"2020-02-16T07:06:16.825Z","comments":true,"path":"2019/1207/build-your-own-hexo-blog-under-mac-2.html","link":"","permalink":"https://whyyoustarted.github.io/2019/1207/build-your-own-hexo-blog-under-mac-2.html","excerpt":"","text":"前言上一篇已经为大家介绍了如何在创建一个博客，那么接下来展示如何将本地的博客部署在免费的GitHub仓库上，这样你就可以通过GitHub地址来访问博客 1. 注册GitHubGitHub可以说是程序员的天堂，里面有很多开源免费的软件或者项目，都9102年了，你还没有GitHub你就out了，当然你如果有GitHub请跳过前几步。 GitHub官网https://github.com 1.注册 进入官网后点击Sign up，进行注册 填完信息以后你需要验证 验证完成后点击next，然后出现让你选择免费版和付费版，这里我们选择免费版（当然大佬有钱随意选择） 然后是一些问卷，如实填写就行 填完后选择Complete setup 或者选择skip this step跳过问卷，然后会验证你的邮箱 点击验证后会跳转到你的GitHub，在这里我们创建存放我们博客的仓库。 填完以后点击Create repository，跳转到以下界面 这样你的GitHub仓库就准备好了，下面开始将博客部署到GitHub上。 2. 将hexo博客推送到GitHub上在终端中输入sudo su 并输入密码进入超级管理员，在终端上输入pwd 看看自己是不是在myblog目录下，如果不在就进入myblog,然后终端输入cnpm install --save hexo-deployer-git 现在我们需要设置mybolg下的_config.yml文件，找到最下面的Deployment 将其修改为如下图并保存 注意有:后有空格 在终端中输入hexo g构建博客 现在可以输入hexo s里本地预览你博客的样子 在浏览器的搜索栏中输入http://localhost:4000/就可以看到了 使用control + c结束本地预览 在终端中输入hexo d，输入GitHub账号和密码 出现了Deploy done: git就说明部署上去了 现在我们只需要在网址栏输入GitHub账号.github.io就可以访问你的博客了。 这样我们就成功把博客部署到了GitHub上了，下一篇将展示如何配置pure主题","categories":[{"name":"hexo","slug":"hexo","permalink":"https://whyyoustarted.github.io/categories/hexo/"}],"tags":[{"name":"教程","slug":"教程","permalink":"https://whyyoustarted.github.io/tags/%E6%95%99%E7%A8%8B/"}]},{"title":"在MAC下搭建专属你的hexo博客(一)","slug":"在MAC下搭建专属你的hexo博客-一","date":"2019-12-06T12:29:08.000Z","updated":"2019-12-08T07:25:52.820Z","comments":true,"path":"2019/1206/set-up-your-own-hexo-blog-under-mac-1.html","link":"","permalink":"https://whyyoustarted.github.io/2019/1206/set-up-your-own-hexo-blog-under-mac-1.html","excerpt":"","text":"写在前面在接下来几篇博客中将展示在MAC下搭建，并配置hexo博客。 ​ 本人也是一个算是个电脑小白，从打算有搭建一个博客的想法到现在大致搭建出一个博客一共花费了一个月，其中有一段时间都以为自己搞不出来了，一度想放弃，后来重拾信心，经过了一个星期时间总结别的前辈写的文章，总算是写出来一个初步的博客，将自己搭建博客的全过程记录下来，也希望可以为以后搭建博客的博友解决一点点迷茫，当然，本人技术也不怎么样，并且刚开始写博客，希望有什么错误或者不妥的地方希望大佬指出来，我会及时改正。让我们进入正题吧，Let’s go! 1.搭建hexo博客我选择了hexo博客的主要原因是hexo时间比较长了，网上的问题解决方法也比较全面。 首先我们需要下载nodejs，我们可以去nodejs.org进行下载 下载好后直接安装就行了。 在终端上分别输入一下node -v和npm -v 如果有显示版本号，那么就说明你安装成功了。 下面在终端中输入sudo su 并输入开机密码 进入超级管理员模式 利用npm安装一个淘宝源cnpm，这样会快一点,在终端中输入npm install -g cnpm --registry=https://registry.npm.taobao.org 在终端中输入cnpm -v测试一下有没有安装成功，如果出现了以下信息就说明安装成功了 接下来使用cnpm来安装hexo框架，在终端中输入cnpm install -g hexo-cli 我们再使用hexo -v来检测一下是否安装成功 接下来在终端中输入mkdir myblog,在用户文件夹中创建一个myblog文件夹。如果在接下来的操作有什么出现什么错误，可以将这个文件夹删除了再重新创建就行了。 先输入cd myblog 进入myblog文件夹再输入sudo hexo init初始化一个博客，速度会有点慢，出现了Start blogging with Hexo! 就可以用了，中间出现warn可以忽略。 然后我们可以打开访达，用户文件夹下的myblog文件夹下发现了hexo为你自动生成了一些博客基础框架的内容 下面为一些hexo博客常用操作的命令，这些会在后面的文章进行演示，这里就不一一演示了。 123456789101.新建一个名为My New Post的文章 hexo new &quot;My New Post&quot; 2.启动本地服务器 hexo server 或 hexo s3.清理缓存文件 hexo clean4.生成静态文件 hexo generate 或 hexo g5.部署网站 hexo deploy 或hexo d 好了，hexo博客就算是构建成功，下一篇展示如何把它保存到Github仓库上。","categories":[{"name":"hexo","slug":"hexo","permalink":"https://whyyoustarted.github.io/categories/hexo/"}],"tags":[{"name":"教程","slug":"教程","permalink":"https://whyyoustarted.github.io/tags/%E6%95%99%E7%A8%8B/"}]},{"title":"xml笔记","slug":"xml笔记","date":"2019-12-03T09:49:14.000Z","updated":"2019-12-06T16:27:25.744Z","comments":true,"path":"2019/1203/xml-notes.html","link":"","permalink":"https://whyyoustarted.github.io/2019/1203/xml-notes.html","excerpt":"","text":"1. XML概述 历史： GML ：Generalized Markup Language 通用标记语言 SGML ：Standard Generalized Markup Language 标准通用标记语言，对GML的完善 HTML ：Hyper Test Markup Language 超文本标记语言 GML ：Extensible Markup Language可拓展标记语言 概念：Extensible Markup Language 可扩展标记语言 可拓展性：标签都是自定义的。 功能 储蓄数据 配置文件 在网络中传输 xml和html的区别 xml标签都是自定义的，html标签都是预定义的 xml的语法严格，html语法松散 xml是储存数据的，html是展示数据的。 2. 基本语法 文档声明 以.xml结尾的 以&lt;?xml version=&#39;XX&#39; [encoding= &quot;XXX&quot;] [standalone=&quot;XX&quot;]?&gt;开头，包括版本类型，编码格式。 version：版本号，必须的属性 encoding：编码方式。告知解析引擎当前文档使用的字符集，默认值：ISO-8859-1 standalone：是否独立 取值： yes：不依赖其他文件 no：依赖其他文件 标签 Tag 标记标签：XML文档的主要组成部分 语法&lt;标签名&gt;....&lt;/标签名&gt; 标签必须成对存在：包含一个开始标签和一个结束标签 开始标签：&lt;标签名&gt; 结束标签：&lt;/标签名&gt; 开始标签和结束标签标签名必须相同。 开始标签和结束标签范围之间的部分叫做标签体，可以包含一些内容。 标签体中可以出现子标签，也可以出现纯文本的信息。 元素Element 根元素 标签(元素,节点)：只强调开始标签和结束标签以及属性，并不重视标签体中包含什么信息 标签内容 元素：代表从开始标签开始、到结束标签之间所包含的所有内容，称之为一个元素。 元素命名规则 以字母或_开头 后面可以根字母,数字,_,-或. 大小写敏感 不能是保留字 没有长度限制 属性 Attribute 对标签/元素进行额外的附加说明。 属性声明在标签的头部（开始标签）。 id属性值唯一 以键值对的形式存在。 属性值必须要加双引号。 可有有多组属性，每组属性之间使用空格分隔 12345678910&lt;student id=\"1001\" age=\"22\" teacher=\"2001,tom,22,male\"&gt; &lt;name&gt;tom&lt;/name&gt; &lt;gender&gt;male&lt;/gender&gt; &lt;teacher&gt; &lt;id&gt;2001&lt;/id&gt; &lt;name&gt;tom&lt;/name&gt; &lt;age&gt;22&lt;/age&gt; &lt;gender&gt;male&lt;/gender&gt; &lt;/teacher&gt; &lt;/student&gt; 注释 12345&lt;!-- 单行注释 --&gt; &lt;!-- 多行注释 多行注释--&gt; 实体 概念：XML文件中的有些字符不能直接表示出来例如：&lt;，为了表示他们我们可以借助实体来完成 &amp;lt; ———-&gt; &lt; &amp;gt;———-&gt; &gt; &amp;apos;———-&gt; &#39; &amp;quot;———-&gt; &quot; &amp;amp;———-&gt; &amp; 文本 CDATA区：在该区域中的数据会被原样展示 1&lt;![CDATA[ 数据 ]]&gt; 如何编写一个有效的XML文档两点要求： 必须是一个结构良好的XML文档 必须使用DTD或者XSD约束文档语义 DTD文档约束 xml本身存在很高的灵活度，所以导致每个程序编写的xml文件差异较大，导致标准不能得到统一，解析的时候难度较大。 需要使用DTD对文档内容进行约束。 约束：制定规则，哪些内容可以出现，哪些内容不能出现…. 内部式 内部：被约束的xml文件的内部,DTD代码全部定义在xml文件中 语法 1&lt;!DOCTYPE 根元素 [元素声明]&gt; 元素声明：允许出现哪些元素、不允许出现哪些元素、元素必须按照什么顺序排列、每种元素能够出现多少次、元素中必须拥有哪些属性、属性是什么类型、有无默认值、是否必要…… 使用ELEMENT来定义元素 语法 1234&lt;!ELEMENT 元素名称 类型&gt;&lt;!ELEMENT 元素名称 内容&gt;&lt;!ELEMENT note (to,from,heading,body)&gt;&lt;!--在node元素中只能出现to、from、heading、body子元素--&gt; 数量词：用于定义某个元素可以出现多次 加在元素名称后边，代表该元素可以出现多少次 + :可以出现一次或者多次，至少出现一次 ? :可以出现零次或者一次 * :可以出现零次或多次，任意次数 | :多个元素中选一个 #PCDATA：元素内容必须是解析器会解析的文本字符串信息约束元素不能有子元素，只能包含纯文本如果给某一个元素声明了#PCDATA类型的约束，那么这个元素不再能够拥有子元素。 EMPTY和ANY 12345678&lt;!ELEMENT 元素名称 EMPTY&gt;&lt;!--元素必须是空元素。空元素：开始标签和结束标签之间没有任何内容--&gt;&lt;hello&gt;&lt;/hello&gt;&lt;!ELEMENT 元素名称 ANY&gt;&lt;!--元素中包含的可以使任意内容。--&gt; ATTLIST用来定义属性 格式：&lt;!ATTLIST 元素名 属性名 属性类型 默认值&gt; 属性类型 ID：属性值必须唯一，属性值必须满足命名规则 enumerated：(枚举值1|枚举值2|枚举值3….)属性 CDATA：属性值为字符 属性默认值 #REQUIRED：属性值必须出现在元素的开头标签中 #IMPLIED：属性可以不出去，并且当他不出现的时候没有默认值implied default-value：属性可以不出现，并且当他不出现的时候有默认值的，二该属性的默认值就是atttibute-value #FIXED:属性可以不出现，但是如果出现的话必须是指定的属性值，不出现的话也是指定的默认值 外部式 把DTD单独定义在一个独立.dtd的文件中 在xml文件中通过简要的声明将这个外置的DTD文件引入进来。 &lt;!DOCTYPE 根标签名 PUBLIC &quot;dtd文件名字&quot; &quot;dtd文件的位置URL&quot;&gt; 使用Java程序解析xml文档的方式 SAX 基于事件驱动式、类似爬虫式的解析方式 SAX弊端是不方便对整个文档进行随机访问 优点是节省内存 DOM Document Object Model 在开始读取数据之前，先把整个xml文档解析一遍，加载到内存中，变成一棵文档树形结构。 优点：操作方便，可以对文档进行CRUD的所有操作 缺点：占内存 这两种解析方式都是JDK中原生的解析方式 xml常见的解析器： JAXP：sun公司提供的解析器，支持dom和sax两种思想 DOM4J：一款非常优秀的解析器 Jsoup：jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。 PULL：Android操作系统内置的解析器，sax方式的。 dom4j Dom for Java 第三方的解析xml的工具，开源、免费 如果需要使用第三方的工具或者框架，首先需要导入依赖。 先把jar文件复制到工程目录下，放在哪里都可以 想把这个jar文件真正当成依赖文件使用，还需要把他添加到类加载路径中。jar右击--&gt;Build Path--&gt;Add to Build Path 语法 123456789101112131415161718192021222324252627282930import java.util.List;import org.dom4j.Document;import org.dom4j.DocumentException;import org.dom4j.Element;// import的时候注意：可能出现很多类名重复的情况// 导的所有的包都是org.dom4j包下import org.dom4j.io.SAXReader;// 解析cities.xml public class Dom4jDemo &#123; public static void main(String[] args) throws Exception &#123; // 第一步、创建Dom4j解析器对象SAXReader SAXReader reader = new SAXReader(); // 第二步、让reader读取文档，能够把一个文档读取成一个树形结构对象 // 这个doc对象已经包含了文档当中所有的内容 Document doc = reader.read(\"src/com/briup/xml/cities.xml\"); // 第三步、获取文档的根元素 Element root = doc.getRootElement(); // 第四步、获取根元素下的所有直接子元素也就是要获取所有的&lt;city&gt; List&lt;Element&gt; elements = root.elements(); // 第五步、遍历这个集合，操作每一个&lt;city&gt; for(Element element:elements) &#123; Element nameEle = element.element(\"name\"); Element codeEle = element.element(\"area-code\"); String name = nameEle.getText(); String code = codeEle.getText(); System.out.println(\"城市名：\" + name + \",\" + \"区号：\" + code); &#125; &#125;&#125; 12345678910111213141516171819&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;cities&gt; &lt;city&gt; &lt;name&gt;北京市&lt;/name&gt; &lt;area-code&gt;010&lt;/area-code&gt; &lt;/city&gt; &lt;city&gt; &lt;name&gt;上海市&lt;/name&gt; &lt;area-code&gt;021&lt;/area-code&gt; &lt;/city&gt; &lt;city&gt; &lt;name&gt;天津市&lt;/name&gt; &lt;area-code&gt;022&lt;/area-code&gt; &lt;/city&gt; &lt;city&gt; &lt;name&gt;重庆市&lt;/name&gt; &lt;area-code&gt;023&lt;/area-code&gt; &lt;/city&gt;&lt;/cities&gt;","categories":[{"name":"XML","slug":"XML","permalink":"https://whyyoustarted.github.io/categories/XML/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://whyyoustarted.github.io/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-11-13T01:13:11.068Z","updated":"2019-12-06T16:27:25.227Z","comments":true,"path":"2019/1113/hello-world.html","link":"","permalink":"https://whyyoustarted.github.io/2019/1113/hello-world.html","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}